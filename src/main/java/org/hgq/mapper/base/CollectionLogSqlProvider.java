package org.hgq.mapper.base;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;
import org.hgq.domain.base.CollectionLog;
import org.hgq.domain.base.CollectionLogExample.Criteria;
import org.hgq.domain.base.CollectionLogExample.Criterion;
import org.hgq.domain.base.CollectionLogExample;

public class CollectionLogSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table collection_log
     *
     * @mbg.generated Thu Aug 19 11:25:54 CST 2021
     */
    public String countByExample(CollectionLogExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("collection_log");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table collection_log
     *
     * @mbg.generated Thu Aug 19 11:25:54 CST 2021
     */
    public String deleteByExample(CollectionLogExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("collection_log");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table collection_log
     *
     * @mbg.generated Thu Aug 19 11:25:54 CST 2021
     */
    public String insertSelective(CollectionLog record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("collection_log");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=BIGINT}");
        }
        
        if (record.getCollectionCaseId() != null) {
            sql.VALUES("collection_case_id", "#{collectionCaseId,jdbcType=VARCHAR}");
        }
        
        if (record.getCollectionObject() != null) {
            sql.VALUES("collection_object", "#{collectionObject,jdbcType=TINYINT}");
        }
        
        if (record.getCallWay() != null) {
            sql.VALUES("call_way", "#{callWay,jdbcType=TINYINT}");
        }
        
        if (record.getCallPhone() != null) {
            sql.VALUES("call_phone", "#{callPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getCallResult() != null) {
            sql.VALUES("call_result", "#{callResult,jdbcType=TINYINT}");
        }
        
        if (record.getCollectionResult() != null) {
            sql.VALUES("collection_result", "#{collectionResult,jdbcType=TINYINT}");
        }
        
        if (record.getPromiseRepayDate() != null) {
            sql.VALUES("promise_repay_date", "#{promiseRepayDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPromiseRepayAmount() != null) {
            sql.VALUES("promise_repay_amount", "#{promiseRepayAmount,jdbcType=DECIMAL}");
        }
        
        if (record.getCallTime() != null) {
            sql.VALUES("call_time", "#{callTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCallDuration() != null) {
            sql.VALUES("call_duration", "#{callDuration,jdbcType=INTEGER}");
        }
        
        if (record.getCallRecording() != null) {
            sql.VALUES("call_recording", "#{callRecording,jdbcType=VARCHAR}");
        }
        
        if (record.getEmpNo() != null) {
            sql.VALUES("emp_no", "#{empNo,jdbcType=VARCHAR}");
        }
        
        if (record.getEmpName() != null) {
            sql.VALUES("emp_NAME", "#{empName,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getVersion() != null) {
            sql.VALUES("version", "#{version,jdbcType=INTEGER}");
        }
        
        if (record.getDeleted() != null) {
            sql.VALUES("deleted", "#{deleted,jdbcType=TINYINT}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table collection_log
     *
     * @mbg.generated Thu Aug 19 11:25:54 CST 2021
     */
    public String selectByExample(CollectionLogExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("collection_case_id");
        sql.SELECT("collection_object");
        sql.SELECT("call_way");
        sql.SELECT("call_phone");
        sql.SELECT("call_result");
        sql.SELECT("collection_result");
        sql.SELECT("promise_repay_date");
        sql.SELECT("promise_repay_amount");
        sql.SELECT("call_time");
        sql.SELECT("call_duration");
        sql.SELECT("call_recording");
        sql.SELECT("emp_no");
        sql.SELECT("emp_NAME");
        sql.SELECT("remark");
        sql.SELECT("version");
        sql.SELECT("deleted");
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.FROM("collection_log");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table collection_log
     *
     * @mbg.generated Thu Aug 19 11:25:54 CST 2021
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        CollectionLog record = (CollectionLog) parameter.get("record");
        CollectionLogExample example = (CollectionLogExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("collection_log");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=BIGINT}");
        }
        
        if (record.getCollectionCaseId() != null) {
            sql.SET("collection_case_id = #{record.collectionCaseId,jdbcType=VARCHAR}");
        }
        
        if (record.getCollectionObject() != null) {
            sql.SET("collection_object = #{record.collectionObject,jdbcType=TINYINT}");
        }
        
        if (record.getCallWay() != null) {
            sql.SET("call_way = #{record.callWay,jdbcType=TINYINT}");
        }
        
        if (record.getCallPhone() != null) {
            sql.SET("call_phone = #{record.callPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getCallResult() != null) {
            sql.SET("call_result = #{record.callResult,jdbcType=TINYINT}");
        }
        
        if (record.getCollectionResult() != null) {
            sql.SET("collection_result = #{record.collectionResult,jdbcType=TINYINT}");
        }
        
        if (record.getPromiseRepayDate() != null) {
            sql.SET("promise_repay_date = #{record.promiseRepayDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPromiseRepayAmount() != null) {
            sql.SET("promise_repay_amount = #{record.promiseRepayAmount,jdbcType=DECIMAL}");
        }
        
        if (record.getCallTime() != null) {
            sql.SET("call_time = #{record.callTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCallDuration() != null) {
            sql.SET("call_duration = #{record.callDuration,jdbcType=INTEGER}");
        }
        
        if (record.getCallRecording() != null) {
            sql.SET("call_recording = #{record.callRecording,jdbcType=VARCHAR}");
        }
        
        if (record.getEmpNo() != null) {
            sql.SET("emp_no = #{record.empNo,jdbcType=VARCHAR}");
        }
        
        if (record.getEmpName() != null) {
            sql.SET("emp_NAME = #{record.empName,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getVersion() != null) {
            sql.SET("version = #{record.version,jdbcType=INTEGER}");
        }
        
        if (record.getDeleted() != null) {
            sql.SET("deleted = #{record.deleted,jdbcType=TINYINT}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table collection_log
     *
     * @mbg.generated Thu Aug 19 11:25:54 CST 2021
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("collection_log");
        
        sql.SET("id = #{record.id,jdbcType=BIGINT}");
        sql.SET("collection_case_id = #{record.collectionCaseId,jdbcType=VARCHAR}");
        sql.SET("collection_object = #{record.collectionObject,jdbcType=TINYINT}");
        sql.SET("call_way = #{record.callWay,jdbcType=TINYINT}");
        sql.SET("call_phone = #{record.callPhone,jdbcType=VARCHAR}");
        sql.SET("call_result = #{record.callResult,jdbcType=TINYINT}");
        sql.SET("collection_result = #{record.collectionResult,jdbcType=TINYINT}");
        sql.SET("promise_repay_date = #{record.promiseRepayDate,jdbcType=TIMESTAMP}");
        sql.SET("promise_repay_amount = #{record.promiseRepayAmount,jdbcType=DECIMAL}");
        sql.SET("call_time = #{record.callTime,jdbcType=TIMESTAMP}");
        sql.SET("call_duration = #{record.callDuration,jdbcType=INTEGER}");
        sql.SET("call_recording = #{record.callRecording,jdbcType=VARCHAR}");
        sql.SET("emp_no = #{record.empNo,jdbcType=VARCHAR}");
        sql.SET("emp_NAME = #{record.empName,jdbcType=VARCHAR}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("version = #{record.version,jdbcType=INTEGER}");
        sql.SET("deleted = #{record.deleted,jdbcType=TINYINT}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        
        CollectionLogExample example = (CollectionLogExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table collection_log
     *
     * @mbg.generated Thu Aug 19 11:25:54 CST 2021
     */
    public String updateByPrimaryKeySelective(CollectionLog record) {
        SQL sql = new SQL();
        sql.UPDATE("collection_log");
        
        if (record.getCollectionCaseId() != null) {
            sql.SET("collection_case_id = #{collectionCaseId,jdbcType=VARCHAR}");
        }
        
        if (record.getCollectionObject() != null) {
            sql.SET("collection_object = #{collectionObject,jdbcType=TINYINT}");
        }
        
        if (record.getCallWay() != null) {
            sql.SET("call_way = #{callWay,jdbcType=TINYINT}");
        }
        
        if (record.getCallPhone() != null) {
            sql.SET("call_phone = #{callPhone,jdbcType=VARCHAR}");
        }
        
        if (record.getCallResult() != null) {
            sql.SET("call_result = #{callResult,jdbcType=TINYINT}");
        }
        
        if (record.getCollectionResult() != null) {
            sql.SET("collection_result = #{collectionResult,jdbcType=TINYINT}");
        }
        
        if (record.getPromiseRepayDate() != null) {
            sql.SET("promise_repay_date = #{promiseRepayDate,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPromiseRepayAmount() != null) {
            sql.SET("promise_repay_amount = #{promiseRepayAmount,jdbcType=DECIMAL}");
        }
        
        if (record.getCallTime() != null) {
            sql.SET("call_time = #{callTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCallDuration() != null) {
            sql.SET("call_duration = #{callDuration,jdbcType=INTEGER}");
        }
        
        if (record.getCallRecording() != null) {
            sql.SET("call_recording = #{callRecording,jdbcType=VARCHAR}");
        }
        
        if (record.getEmpNo() != null) {
            sql.SET("emp_no = #{empNo,jdbcType=VARCHAR}");
        }
        
        if (record.getEmpName() != null) {
            sql.SET("emp_NAME = #{empName,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getVersion() != null) {
            sql.SET("version = #{version,jdbcType=INTEGER}");
        }
        
        if (record.getDeleted() != null) {
            sql.SET("deleted = #{deleted,jdbcType=TINYINT}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("id = #{id,jdbcType=BIGINT}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table collection_log
     *
     * @mbg.generated Thu Aug 19 11:25:54 CST 2021
     */
    protected void applyWhere(SQL sql, CollectionLogExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}